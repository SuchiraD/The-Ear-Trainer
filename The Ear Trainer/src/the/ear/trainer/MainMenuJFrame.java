/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package the.ear.trainer;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JPanel;
import org.jfugue.theory.Intervals;
import org.jfugue.theory.*;


/**
 *
 * @author Suchira
 */
public class MainMenuJFrame extends javax.swing.JFrame {

    private User user;
    private static MainMenuJFrame singleton;
    
    
    Map<String, String> answerMap = new HashMap<>();
    Map<String, String> answerMapChords = new HashMap<>();
    Map<String, String> exMap = new HashMap<>();
    
    List<String> chordsExList = new ArrayList<>();
    List<String> pitchExList = new ArrayList<>();
    List<String> scalesExList = new ArrayList<>();
    List<String> intervelsExList = new ArrayList<>();
    private final int MAX_EX_SCALES = 18;
    private final int MAX_EX_CHORDS = 34;
    private final String[] scalePatterns = new String[MAX_EX_SCALES];
    private final String[] chordPatterns = new String[MAX_EX_CHORDS];
    private final String[] scales = new String[MAX_EX_SCALES];
    private final String[] chords = new String[MAX_EX_CHORDS];
    private final String[] notePatterns = {"C", "C#", "Db", "D", "D#", "Eb", "E", "F", "F#", "Gb", "G", "G#", "Ab", "A", "A#", "Bb", "B"};

    /**
     * Creates new form MainMenuJFrame
     */
    
    public static MainMenuJFrame getMainMenuJFrame(User user){
        if(singleton == null){
            singleton = new MainMenuJFrame(user);
        }
        return singleton;
    }
    
    private MainMenuJFrame(User user) {
        initComponents();
        this.user = user;
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        chartPanel2.setBounds(dynamicChangingPanel.getX(), dynamicChangingPanel.getY()+dynamicChangingPanel.getHeight()+10, dynamicChangingPanel.getWidth(), dynamicChangingPanel.getHeight());
        usernameLabel.setText(user.getUserName());
        creator();
    }
    
    public void repaintPanel(JPanel panel1, JPanel panel2){
        panel1.setLayout(new BorderLayout());
        panel1.removeAll();
        panel1.add(panel2);
        panel1.repaint();
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userDetailsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        lastVisitedLabel = new javax.swing.JLabel();
        finalScoreLabel = new javax.swing.JLabel();
        bestScoreLabel = new javax.swing.JLabel();
        choosingPanel = new javax.swing.JPanel();
        practiceButton = new javax.swing.JButton();
        performanceButton = new javax.swing.JButton();
        dynamicChangingPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        chartPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        userDetailsPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("Username:");

        jLabel2.setText("Final Score:");

        jLabel3.setText("Last Visited:");

        jLabel4.setText("Best Score:");

        javax.swing.GroupLayout userDetailsPanelLayout = new javax.swing.GroupLayout(userDetailsPanel);
        userDetailsPanel.setLayout(userDetailsPanelLayout);
        userDetailsPanelLayout.setHorizontalGroup(
            userDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(userDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(userDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lastVisitedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(finalScoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bestScoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        userDetailsPanelLayout.setVerticalGroup(
            userDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(userDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(usernameLabel))
                .addGap(18, 18, 18)
                .addGroup(userDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lastVisitedLabel))
                .addGap(18, 18, 18)
                .addGroup(userDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(finalScoreLabel))
                .addGap(18, 18, 18)
                .addGroup(userDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(bestScoreLabel))
                .addContainerGap(58, Short.MAX_VALUE))
        );

        choosingPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        practiceButton.setText("Practice");
        practiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                practiceButtonActionPerformed(evt);
            }
        });

        performanceButton.setText("Performance");
        performanceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                performanceButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout choosingPanelLayout = new javax.swing.GroupLayout(choosingPanel);
        choosingPanel.setLayout(choosingPanelLayout);
        choosingPanelLayout.setHorizontalGroup(
            choosingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(choosingPanelLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(choosingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(performanceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(practiceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        choosingPanelLayout.setVerticalGroup(
            choosingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(choosingPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(practiceButton)
                .addGap(18, 18, 18)
                .addComponent(performanceButton)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        dynamicChangingPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        dynamicChangingPanel.setPreferredSize(new java.awt.Dimension(373, 373));

        javax.swing.GroupLayout dynamicChangingPanelLayout = new javax.swing.GroupLayout(dynamicChangingPanel);
        dynamicChangingPanel.setLayout(dynamicChangingPanelLayout);
        dynamicChangingPanelLayout.setHorizontalGroup(
            dynamicChangingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 443, Short.MAX_VALUE)
        );
        dynamicChangingPanelLayout.setVerticalGroup(
            dynamicChangingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jButton1.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jButton1.setText("Logout");

        javax.swing.GroupLayout chartPanel2Layout = new javax.swing.GroupLayout(chartPanel2);
        chartPanel2.setLayout(chartPanel2Layout);
        chartPanel2Layout.setHorizontalGroup(
            chartPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        chartPanel2Layout.setVerticalGroup(
            chartPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(userDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(choosingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(dynamicChangingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chartPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(257, 257, 257))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(userDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(choosingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dynamicChangingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chartPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void practiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_practiceButtonActionPerformed
        PracticeButtonPanel practiceButtonPanel = new PracticeButtonPanel(this);
//        practiceButtonPanel.setLayout(new GridLayout(0, 10));
        dynamicChangingPanel.setLayout(new BorderLayout());
        dynamicChangingPanel.removeAll();
        dynamicChangingPanel.add(practiceButtonPanel);
        dynamicChangingPanel.repaint();
        this.setVisible(true);
    }//GEN-LAST:event_practiceButtonActionPerformed

    private void performanceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_performanceButtonActionPerformed
        // TODO add your handling code here:
//        ReportHandler handler = new ReportHandler();
//        handler.getDailyPerformance();
//        System.out.println(new Date());
        
        
        PerformanceJFrame performanceJFrame = new PerformanceJFrame();
        performanceJFrame.setVisible(true);
//        repaintPanel(dynamicChangingPanel, chartPanel1);
//        repaintPanel(this.chartPanel2, chartPanel2);
    }//GEN-LAST:event_performanceButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenuJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenuJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenuJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenuJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenuJFrame(User.getUser()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bestScoreLabel;
    private javax.swing.JPanel chartPanel2;
    private javax.swing.JPanel choosingPanel;
    private javax.swing.JPanel dynamicChangingPanel;
    private javax.swing.JLabel finalScoreLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lastVisitedLabel;
    private javax.swing.JButton performanceButton;
    private javax.swing.JButton practiceButton;
    private javax.swing.JPanel userDetailsPanel;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables

    public void repaintDynamicPanel(ExercisePanel exercisePanel) {
        repaintPanel(dynamicChangingPanel, exercisePanel);
    }
    
    public void creator(){
        /* MAJAR SCALES */
        scalePatterns[0] = "C D E F G A B C6"; //C 
        scalePatterns[1] = "G A B C6 D6 E6 F#6 G6";//G
        scalePatterns[2] = "D E F# G A B C#6 D6";//D
        scalePatterns[3] = "A4 B4 C# D E F# G# A";//A
        scalePatterns[4] = "E F# G# A B C#6 D#6 E6";//E
        
        scalePatterns[5] = "F G A Bb C6 D6 E6 F6";//F
        scalePatterns[6] = "Bb4 C D Eb F G A Bb";//B FLAT
        scalePatterns[7] = "Eb F G Ab Bb C6 D6 Eb6";//E FLAT
        scalePatterns[8] = "Ab4 Bb4 C Db Eb F G Ab";//A FLAT

        
        scales[0] = "C MAJOR";
        scales[1] = "G MAJOR";
        scales[2] = "D MAJOR";
        scales[3] = "A MAJOR";
        scales[4] = "E MAJOR";
        scales[5] = "F MAJOR";
        scales[6] = "B FLAT MAJOR";
        scales[7] = "E FLAT MAJOR";
        scales[8] = "A FLAT MAJOR";
        /*---------------------------------------*/
        
        /* MINOR SCALES */
        scalePatterns[9] = "A4 B4 C D E F G A"; //A 
        scalePatterns[10] = "E F# G A B C6 D6 E6";//E
        scalePatterns[11] = "B4 C# D E F# G A B";//B
        scalePatterns[12] = "F#4 G#4 A4 B4 C# D E F#";//F SHARP
        scalePatterns[13] = "C# D# E F# G# A B C#6";//C SHARP
        
        scalePatterns[14] = "D E F G A Bb C6 D6";//D
        scalePatterns[15] = "G4 A4 Bb4 C D Eb F G";//G
        scalePatterns[16] = "C D Eb F G Ab Bb C6";//C
        scalePatterns[17] = "F4 G4 Ab4 Bb4 C Db Eb F";//F
        
        
        scales[9] = "A MINOR";
        scales[10] = "E MINOR";
        scales[11] = "B MINOR";
        scales[12] = "F SHARP MINOR";
        scales[13] = "C SHARP MINOR";
        scales[14] = "D MINOR";
        scales[15] = "G MINOR";
        scales[16] = "C MINOR";
        scales[17] = "F MINOR";
        /*---------------------------------------*/
        
        /*major chords*/
        chordPatterns[0] = "Cmaj"; chordPatterns[1] = "C#maj"; chordPatterns[2] = "Dbmaj";
        chordPatterns[3] = "Dmaj"; chordPatterns[4] = "D#maj"; chordPatterns[5] = "Ebmaj";
        chordPatterns[6] = "Emaj"; chordPatterns[7] = "Fmaj"; chordPatterns[8] = "F#maj";
        chordPatterns[9] = "Gbmaj"; chordPatterns[10] = "Gmaj"; chordPatterns[11] = "G#maj";
        chordPatterns[12] = "Abmaj"; chordPatterns[13] = "Amaj"; chordPatterns[14] = "A#maj";
        chordPatterns[15] = "Bbmaj"; chordPatterns[16] = "Bmaj";
        
        chords[0] = "C MAJOR"; chords[1] = "C SHARP MAJOR"; chords[2] = "D FLAT MAJOR";
        chords[3] = "D MAJOR"; chords[4] = "D SHARP MAJOR"; chords[5] = "E FLAT MAJOR";
        chords[6] = "E MAJOR"; chords[7] = "F MAJOR"; chords[8] = "F SHARP MAJOR";
        chords[9] = "G FLAT MAJOR"; chords[10] = "G MAJOR"; chords[11] = "G SHARP MAJOR";
        chords[12] = "A FLAT MAJOR"; chords[13] = "A MAJOR"; chords[14] = "A SHARP MAJOR";
        chords[15] = "B FLAT MAJOR"; chords[16] = "B MAJOR"; 
        /*------------------------------------------------------------------------------*/
        
        /*MINOR CHORDS*/
        chordPatterns[17] = "Cmin"; chordPatterns[18] = "C#min"; chordPatterns[19] = "Dbmin";
        chordPatterns[20] = "Dmin"; chordPatterns[21] = "D#min"; chordPatterns[22] = "Ebmin";
        chordPatterns[23] = "Emin"; chordPatterns[24] = "Fmin"; chordPatterns[25] = "F#min";
        chordPatterns[26] = "Gbmin"; chordPatterns[27] = "Gmin"; chordPatterns[28] = "G#min";
        chordPatterns[29] = "Abmin"; chordPatterns[30] = "Amin"; chordPatterns[31] = "A#min";
        chordPatterns[32] = "Bbmin"; chordPatterns[33] = "Bmin"; 
        
        chords[17] = "C MINOR"; chords[18] = "C SHARP MINOR"; chords[19] = "D FLAT MINOR";
        chords[20] = "D MINOR"; chords[21] = "D SHARP MINOR"; chords[22] = "E FLAT MINOR";
        chords[23] = "E MINOR"; chords[24] = "F MINOR"; chords[25] = "F SHARP MINOR";
        chords[26] = "G FLAT MINOR"; chords[27] = "G MINOR"; chords[28] = "G SHARP MINOR";
        chords[29] = "A FLAT MINOR"; chords[30] = "A MINOR"; chords[31] = "A SHARP MINOR";
        chords[32] = "B FLAT MINOR"; chords[33] = "B MINOR"; 
        /*--------------------------------------------------------------------------------*/

        /*Intervals*/
        String[] roots1 = {"F", "Eb", "A", "D", "G"};
        String[] roots2 = {"C", "E", "Bb", "Ab", "G"};
        
        for (String string : roots1) {
            perfectOctave(string);
            major3rd(string);
            minor3rd(string);
            major6th(string);
            minor6th(string);
            perfectFifth(string);
            major2nd(string);
            minor2nd(string);
        }
        
        for (String string : roots2) {
            perfectForth(string);
            major7th(string);
            minor7th(string);
        }
        /*----------------------------------------*/
        
        
        int i = 0;
        for (String scalePattern : scalePatterns) {
            scalesExList.add(scalePattern);
            answerMap.put(scalePattern, scales[i]);
            exMap.put(scales[i], scalePattern);
            i++;
        }
        i = 0;
        for (String chordPattern : chordPatterns) {
            chordsExList.add(chordPattern);
            answerMap.put(chordPattern, chords[i]);
//            exMap.put(scales[i], chordPattern);
            i++;
        }
        
        /*NOTES*/
        for (String string : notePatterns) {
            String name = "";
            Character temp = string.charAt(string.length()-1);
            if(temp == '#'){
                name = string.charAt(0) + " SHARP";
            }
            else if(temp == 'b'){
                name = string.charAt(0) + " FLAT";
            }
            else{
                name = string.charAt(0) + "";
            }
            answerMap.put(string, name);
        }
        
        for (String string : notePatterns) {
            String name = "";
            Character temp = string.charAt(string.length()-1);
            if(temp == '#'){
                name = string.charAt(0) + "4th OCT SHARP";
                string = string.charAt(0) + "4#";
            }
            else if(temp == 'b'){
                name = string.charAt(0) + "4th OCT FLAT";
                string = string.charAt(0) + "4b";
            }
            else{
                name = string.charAt(0) + "4th OCT";
                string = string.charAt(0) + "4";
            }
            answerMap.put(string, name);
        }
        
        for (String string : notePatterns) {
            String name = "";
            Character temp = string.charAt(string.length()-1);
            if(temp == '#'){
                name = string.charAt(0) + "6th OCT SHARP";
                string = string.charAt(0) + "6#";
            }
            else if(temp == 'b'){
                name = string.charAt(0) + "6th OCT FLAT";
                string = string.charAt(0) + "6b";
            }
            else{
                name = string.charAt(0) + "6th OCT";
                string = string.charAt(0) + "6";
            }
            answerMap.put(string, name);
        }
        /*---------------------------------------*/
        
    }
    
    public void perfectForth(String root){
        Intervals riff = new Intervals("<1>w <4>w");
        riff.setRoot(root);
        String pattern = riff.getPattern().toString(), interName = "PERFECT FOURTH";
        
        intervelsExList.add(pattern);
        answerMap.put(pattern, interName);
        
    }
    
    public void perfectOctave(String root){
        Intervals riff = new Intervals("<1>w <8>w");
        riff.setRoot(root);
        String pattern = riff.getPattern().toString(), interName = "PERFECT OCTAVE";
        
        intervelsExList.add(pattern);
        answerMap.put(pattern, interName);
    }
    public void perfectUnison(String root){
        Intervals riff = new Intervals("<1>w <1>w");
        riff.setRoot(root);
        String pattern = riff.getPattern().toString(), interName = "PERFECT UNISON";
        
        intervelsExList.add(pattern);
        answerMap.put(pattern, interName);
    }
    public void perfectFifth(String root){
        Intervals riff = new Intervals("<1>w <5>w");
        riff.setRoot(root);
        String pattern = riff.getPattern().toString(), interName = "PERFECT FIFTH";
        
        intervelsExList.add(pattern);
        answerMap.put(pattern, interName);
    }
    public void major2nd(String root){
        Intervals riff = new Intervals("<1>w <2>w");
        riff.setRoot(root);
        String pattern = riff.getPattern().toString(), interName = "MAJOR SECOND";
        
        intervelsExList.add(pattern);
        answerMap.put(pattern, interName);
    }
    public void major3rd(String root){
        Intervals riff = new Intervals("<1>w <3>w");
        riff.setRoot(root);
        String pattern = riff.getPattern().toString(), interName = "MAJOR THIRD";
        
        intervelsExList.add(pattern);
        answerMap.put(pattern, interName);
    }
    public void major7th(String root){
        Intervals riff = new Intervals("<1>w <7>w");
        riff.setRoot(root);
        String pattern = riff.getPattern().toString(), interName = "MAJOR SEVENTH";
        
        intervelsExList.add(pattern);
        answerMap.put(pattern, interName);
    }
    public void major6th(String root){
        Intervals riff = new Intervals("<1>w <6>w");
        riff.setRoot(root);
        String pattern = riff.getPattern().toString(), interName = "MAJOR SIXTH";
        
        intervelsExList.add(pattern);
        answerMap.put(pattern, interName);
    }
    public void minor3rd(String root){
        Intervals riff = new Intervals("<1>w <3>bw");
        riff.setRoot(root);
        String pattern = riff.getPattern().toString(), interName = "MINOR THIRD";
        
        intervelsExList.add(pattern);
        answerMap.put(pattern, interName);
    }
    public void minor6th(String root){
        Intervals riff = new Intervals("<1>w <6>bw");
        riff.setRoot(root);
        String pattern = riff.getPattern().toString(), interName = "MINOR SIXTH";
        
        intervelsExList.add(pattern);
        answerMap.put(pattern, interName);
    }
    public void minor7th(String root){
        Intervals riff = new Intervals("<1>w <7>bw");
        riff.setRoot(root);
        String pattern = riff.getPattern().toString(), interName = "MINOR SEVENTH";
        
        intervelsExList.add(pattern);
        answerMap.put(pattern, interName);
    }
    public void minor2nd(String root){
        Intervals riff = new Intervals("<1>w <2>bw");
        riff.setRoot(root);
        String pattern = riff.getPattern().toString(), interName = "MINOR SECOND";        
        
        intervelsExList.add(pattern);
        answerMap.put(pattern, interName);
    }
    
}
